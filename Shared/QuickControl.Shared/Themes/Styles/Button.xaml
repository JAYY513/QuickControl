<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:QuickControl.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:packIcon="clr-namespace:QuickControl.PackIcon"
    xmlns:qc="clr-namespace:QuickControl.Controls"
    mc:Ignorable="d">

    <d:ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/QuickControl;component/Themes/BaseResource.xaml" />
    </d:ResourceDictionary.MergedDictionaries>

    <Storyboard x:Key="ButtonBase.Storyboard">
        <ThicknessAnimation
            AutoReverse="False"
            By="-4"
            FillBehavior="HoldEnd"
            Storyboard.TargetName="Border"
            Storyboard.TargetProperty="Margin"
            From="0"
            Duration="0:0:0.3" />
        <DoubleAnimationUsingKeyFrames
            Storyboard.TargetName="Border"
            Storyboard.TargetProperty="Opacity"
            Duration="0:0:1">
            <DoubleAnimationUsingKeyFrames.KeyFrames>
                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.1" Value="0.1" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="0.23" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="0.18" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.5" Value="0" />
            </DoubleAnimationUsingKeyFrames.KeyFrames>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="ThemeButtonBase.Storyboard">
        <ThicknessAnimation
            AutoReverse="False"
            By="-4"
            FillBehavior="HoldEnd"
            Storyboard.TargetName="Border"
            Storyboard.TargetProperty="Margin"
            From="0"
            Duration="0:0:0.3" />
        <ThicknessAnimation
            AutoReverse="False"
            By="4"
            FillBehavior="HoldEnd"
            Storyboard.TargetName="Border"
            Storyboard.TargetProperty="BorderThickness"
            From="0"
            Duration="0:0:0.3" />
        <DoubleAnimationUsingKeyFrames
            Storyboard.TargetName="Border"
            Storyboard.TargetProperty="Opacity"
            Duration="0:0:1">
            <DoubleAnimationUsingKeyFrames.KeyFrames>
                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.1" Value="0.21" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="0.43" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="0.38" />
                <SplineDoubleKeyFrame KeyTime="0:0:0.5" Value="0" />
            </DoubleAnimationUsingKeyFrames.KeyFrames>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>


    <ControlTemplate x:Key="ButtonBase.ControlTemplate" TargetType="{x:Type Button}">
        <Grid>
            <Border
                Name="Border"
                Margin="0"
                Background="Transparent"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="4"
                CornerRadius="{Binding Path=(qc:ControlsHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                Opacity="0.0" />
            <Border
                x:Name="Background"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{Binding Path=(qc:ControlsHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Grid
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <packIcon:PackIcon
                    x:Name="PackIcon"
                    Margin="2,0"
                    VerticalAlignment="Center"
                    Kind="{TemplateBinding qc:ControlsHelper.Icon}" />
                <ContentPresenter
                    Grid.Column="1"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding Content}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PackIcon" Property="Kind" Value="Abacus">
                <Setter TargetName="PackIcon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <EventTrigger RoutedEvent="Button.Click">
                <EventTrigger.Actions>
                    <BeginStoryboard Storyboard="{StaticResource ButtonBase.Storyboard}" />
                </EventTrigger.Actions>
            </EventTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value=".9" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ControlFillColorDefaultBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="qc:ControlsHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Template" Value="{StaticResource ButtonBase.ControlTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ButtonDashedBaseStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="{DynamicResource ControlStrongStrokeColorDisabledBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="qc:ControlsHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            Name="Border"
                            Margin="0"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="4"
                            CornerRadius="{Binding Path=(qc:ControlsHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Opacity="0.0" />
                        <qc:DashedBorder
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderDashArray="3,2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(qc:ControlsHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <packIcon:PackIcon
                                    x:Name="PackIcon"
                                    Margin="2,0"
                                    VerticalAlignment="Center"
                                    Kind="{TemplateBinding qc:ControlsHelper.Icon}" />
                                <ContentPresenter
                                    Grid.Column="1"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding Content}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </qc:DashedBorder>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PackIcon" Property="Kind" Value="Abacus">
                            <Setter TargetName="PackIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <EventTrigger RoutedEvent="Button.Click">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource ButtonBase.Storyboard}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="ButtonDefault"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
                <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                <Setter Property="Background" Value="{DynamicResource ControlFillColorTertiaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ButtonPrimary"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ButtonLink"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="qc:ControlsHelper.BorderBrushHover" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Opacity" Value=".7" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--<Style
        x:Key="QDashedButton"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource DashedBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryDashedHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryDashedHueLightBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryDashedHueDarkBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style
        x:Key="ButtonDashed"
        BasedOn="{StaticResource ButtonDashedBaseStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Opacity" Value=".7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ButtonDashedPrimary"
        BasedOn="{StaticResource ButtonDashedBaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".7" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="ButtonNeuomorphismBox"
        BasedOn="{StaticResource {x:Type qc:NeuomorphismBox}}"
        TargetType="qc:NeuomorphismBox">
        <Setter Property="Blur" Value="9" />
        <Setter Property="Distance" Value="6" />
        <Setter Property="Color" Value="#dedede" />
        <Setter Property="CornerRadius" Value="6" />
    </Style>
    <Style x:Key="ButtonNeuomorphism" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="40" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <qc:NeuomorphismBox
                            x:Name="PressedBackground"
                            Opacity="0"
                            Shape="Pressed"
                            Style="{StaticResource ButtonNeuomorphismBox}" />
                        <qc:NeuomorphismBox x:Name="FlatBackground" Style="{StaticResource ButtonNeuomorphismBox}" />
                        <ContentControl
                            x:Name="PART_ContentPresenter"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="00:00:00.1500000" />
                                    <VisualTransition GeneratedDuration="00:00:00.1200000" To="Pressed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FlatBackground" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsPressed" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>